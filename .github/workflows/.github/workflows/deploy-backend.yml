name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: '<aks_cluster_name>'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: '<resource_group_name>'
      aks_acr_name:
        description: 'Name of ACR'
        required: true
        default: '<acr_name>'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials --resource-group ${{ github.event.inputs.aks_resource_group }} --name ${{ github.event.inputs.aks_cluster_name }} --overwrite-existing

      - name: Attach ACR
        run: |
          az aks update --name ${{ github.event.inputs.aks_cluster_name }} --resource-group ${{ github.event.inputs.aks_resource_group }} --attach-acr ${{ github.event.inputs.aks_acr_name }}

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          echo "Deploying backend infrastructure..."
          cd k8s/
          kubectl apply -f configmaps.yaml -n ecommerce
          kubectl apply -f secrets.yaml -n ecommerce
          kubectl apply -f product-db.yaml -n ecommerce
          kubectl apply -f order-db.yaml -n ecommerce

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          echo "Deploying backend microservices..."
          cd k8s/
          kubectl apply -f product-service.yaml -n ecommerce
          kubectl apply -f order-service.yaml -n ecommerce

      - name: Wait for Product LoadBalancer IP
        run: |
          echo "Waiting for Product LoadBalancer IP to be assigned (up to 5 minutes)..."
          PRODUCT_IP=""

          for i in $(seq 1 60); do
            echo "Attempt $i/60 to get Product IP..."
            PRODUCT_IP=$(kubectl get svc product-service-w09-aks -n ecommerce -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

            if [[ -n "$PRODUCT_IP" ]]; then
              echo "Product LoadBalancer IP assigned!"
              echo "Product Service IP: $PRODUCT_IP"
              break
            fi
            sleep 5
          done

          if [[ -z "$PRODUCT_IP" ]]; then
            echo "Error: Product LoadBalancer IP not assigned after timeout."
            exit 1
          fi

          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        run: az logout
