# week08/.github/workflows/cd-deploy-aks.yml
name: CD - Deploy Backend & Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'week09-aks'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'week09-rg'
      aks_acr_name:
        description: 'Name of ACR'
        required: true
        default: 'uroalsaadiweek09acr'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Kubernetes context
        run: |
          az aks get-credentials --resource-group ${{ github.event.inputs.aks_resource_group }} \
                                 --name ${{ github.event.inputs.aks_cluster_name }} \
                                 --overwrite-existing

      - name: Deploy Backend
        run: |
          cd k8s/
          kubectl apply -f configmaps.yaml -n ecommerce
          kubectl apply -f secrets.yaml -n ecommerce
          kubectl apply -f product-db.yaml -n ecommerce
          kubectl apply -f order-db.yaml -n ecommerce
          kubectl apply -f product-service.yaml -n ecommerce
          kubectl apply -f order-service.yaml -n ecommerce

      - name: Wait for Backend LoadBalancer IPs
        run: |
          for i in $(seq 1 60); do
            PRODUCT_IP=$(kubectl get svc product-service-w08e1 -n ecommerce -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get svc order-service-w08e1 -n ecommerce -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then break; fi
            sleep 5
          done

          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: LoadBalancer IPs not assigned after timeout."
            exit 1
          fi

          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV

      - name: Capture Product IP
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Order IP
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout Azure
        if: always()
        run: az logout

  deploy_frontend:
    needs: deploy_backend
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Debug: Show ACR Name
        run: echo "ACR Name: ${{ github.event.inputs.aks_acr_name }}"

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ github.event.inputs.aks_acr_name }}

      - name: Inject Backend IPs
        run: |
          sed -i "s|_PRODUCT_API_URL_|http://${{ needs.deploy_backend.outputs.PRODUCT_API_IP }}:8000|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|http://${{ needs.deploy_backend.outputs.ORDER_API_IP }}:8001|g" frontend/main.js

      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ github.event.inputs.aks_acr_name }}.azurecr.io/frontend:latest ./frontend/
          docker push ${{ github.event.inputs.aks_acr_name }}.azurecr.io/frontend:latest

      - name: Set Kubernetes context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ github.event.inputs.aks_resource_group }}
          cluster-name: ${{ github.event.inputs.aks_cluster_name }}

      - name: Deploy Frontend to AKS
        run: |
          cd k8s/
          kubectl apply -f frontend.yaml

      - name: Logout Azure
        if: always()
        run: az logout
